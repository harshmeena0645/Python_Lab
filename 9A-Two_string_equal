def levenshtein_distance(str1, str2):
    # Create a matrix to store the distances
    len_str1, len_str2 = len(str1), len(str2)
    dp = [[0] * (len_str2 + 1) for _ in range(len_str1 + 1)]

    # Initialize the matrix
    for i in range(len_str1 + 1):
        dp[i][0] = i
    for j in range(len_str2 + 1):
        dp[0][j] = j

    # Calculate the Levenshtein distance
    for i in range(1, len_str1 + 1):
        for j in range(1, len_str2 + 1):
            cost = 0 if str1[i - 1] == str2[j - 1] else 1
            dp[i][j] = min(dp[i - 1][j] + 1,    # Deletion
                           dp[i][j - 1] + 1,    # Insertion
                           dp[i - 1][j - 1] + cost)  # Substitution

    return dp[len_str1][len_str2]

def are_nearly_equal(str1, str2, tolerance=2):
    # Get the Levenshtein distance between the two strings
    distance = levenshtein_distance(str1, str2)

    # If the distance is less than or equal to the tolerance, consider them nearly equal
    return distance <= tolerance

# Example usage
str1 = input("Enter the first string: ")
str2 = input("Enter the second string: ")

if are_nearly_equal(str1, str2):
    print("The strings are nearly equal.")
else:
    print("The strings are not nearly equal.")
